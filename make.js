// Steal some table from Rust's unicode-width.
// Usage: `node make.js`

import fs from 'fs'
import os from 'os'
import path from 'path'
import https from 'https'

async function fetch(filename) {
  const cached = path.join(os.tmpdir(), path.basename(filename))
  if (!fs.existsSync(cached))
    await new Promise(resolve => https.get(
      process.env.CI ?
        `https://raw.githubusercontent.com/unicode-rs/unicode-width/master/${filename}` :
        `https://cdn.jsdelivr.net/gh/unicode-rs/unicode-width@master/${filename}`,
      res => res.pipe(fs.createWriteStream(cached)).on('finish', resolve)))
  return fs.readFileSync(cached, 'utf8')
}

const raw = await fetch('src/tables.rs')

const version = raw.match(/\bconst UNICODE_VERSION[^=]+= \(([^\)]+)\)/)[1].split(/,\s*/).join('.')

const tables = []
raw.replace(/\bstatic TABLES_(\d+)[^=]+= \[([^\]]+)\]/gm, (_, i, arr) => {
  i = parseInt(i)
  const table = []
  arr.replace(/\b0x[0-9a-f]{2}/gi, hex => table.push(parseInt(hex, 16)))
  tables[i] = table
})

let module = `// The following code was generated by "make.js", do not edit directly
`

module += `
const UNICODE_VERSION = '${version}'
`

tables.forEach((table, i) => {
  module += `\nconst TABLES_${i} = [${table}]`
})

// ambiguousIsNarrow = true -> no cjk, false -> _cjk
module += `

function stringWidth(string, { ambiguousIsNarrow = true } = {}) {
  let width = 0
  for (const char of string) {
    width += charWidth(char, ambiguousIsNarrow)
  }
  return width
}

function charWidth(char, isNarrow) {
  if (char < '\\x7F') {
    return char >= '\\x20' ? 1 : 0
  } else if (char >= '\\xA0') {
    return lookupWidth(char.codePointAt(0), isNarrow)
  } else {
    return 0
  }  
}

function lookupWidth(cp, isNarrow) {
  const t1_offset = TABLES_0[cp >> 13 & 0xFF]
  const t2_offset = TABLES_1[128 * t1_offset + (cp >> 6 & 0x7F)]
  const packed_widths = TABLES_2[16 * t2_offset + (cp >> 2 & 0xF)]
  const width = packed_widths >> (2 * (cp & 0b11)) & 0b11
  return width !== 3 ? width : isNarrow ? 1 : 2
}
`

const esm = module + `
export default stringWidth
export { UNICODE_VERSION }
`
fs.writeFileSync('index.js', esm)

const cjs = module + `
module.exports = stringWidth
module.exports.UNICODE_VERSION = UNICODE_VERSION
`
fs.writeFileSync('index.cjs', cjs)

const iife = `var stringWidth = (function() {
${module}
stringWidth.UNICODE_VERSION = UNICODE_VERSION
return stringWidth
})();
`
fs.writeFileSync('index.iife.js', iife)
